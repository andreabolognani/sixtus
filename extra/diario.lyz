title#Diario del Capitano#Per giungere là dove molti altri uomini sono giunti prima
prev#Extra/Immagini/#Lista delle Immagini
next#Extra/MLCAD/#MLCAD &amp; LPub
related#Storie/2011/LII/#Sgaggio Tiem
related#Extra/FPGA/Download/#La @Relazione@ per Sgaggio
related@li#Extra/HowToBuildRoot/Download/#La @Guida@ che ho scritto alla fine
start#page
tab#m00
	title#Data Astrale [<code>M00</code>] <em>16/04</em> 2012
	Recuperato il <code>CDROM</code> contenente tutto quel che <em>dovrebbe</em>
	servire per il installare il <code>cross-compilatore</code>, l'equipaggio ha
	dato inizio al carico degli artefatti recuparati, mettendoli al sicuro nella
	directory <code>[/opt/thesis/loot/]</code>.

	Al contempo, io e il mio <em>secondo in comando</em> – il fedele
	<code>Tanngrisnir</code>, il cui alimentatore sta tirando gli ultimi –
	abbiamo dato inizio all'installazione di alcuni pacchetti ausiliari, in
	particolare il misterioso <code>[alien]</code>, interprete responsabile
	(almeno in teoria) di passare dall'ignoto formato <code>.rpm</code> di
	<em>RedHat</em> (pianeta membro della Federazione) al più familiare
	<code>.deb</code>; accade, tuttavia, che il suo utilizzo non dia i risultati
	sperati.
	br#
	Come spesso io stesso ho operato in passato, questo <em>Alien</em>
	<strong>millanta</strong>. La semplice chiamata
	begin#outside
		<code>alien --to-deb
		mtwk-lnx-powerpc-gcc-3.4.3-glibc-2.3.3-0.28-1-i686.rpm</code>
	end#outside
	non produca l'equivalente pacchetto per <code>apt</code>. Non produce
	alcunché, in effetti. Potrebbe essere colpa del <em>Perl</em>?

	Mi sono recato personalmente in sala macchine per verificare lo stato
	dell'installazione. Pare che tutto sia in ordine, nel bene o nel male: tutti
	i pacchetti sono correttamenti installati e paiono funzionare…
	<code>perl</code>, <code>dpkg</code>, <code>gcc</code>, <code>make</code>,
	<code>lintian</code>, persino <code>rpm</code>.

	Il mio prossimo tentativo è quello di utilizzare <code>fakeroot</code>, un
	comando in grado di garantire <em>fittizi privilegi d'amministratore</em> in
	un ambiente controllato. Non vedo alcuna differenza.

	Con le opportune opzioni <code>-v -g</code>, scopro quel che <em>alien</em>
	sta (o non sta?) facendo. Scopro che (o almeno <strong>spero</strong> d'aver
	scoperto) non c'è alcun problema con <em>alien</em>, bensì con quei burloni
	di <em>debhelper</em> che dovrebbero fabbricarmi il <code>.deb</code>; cosa
	che non accade.
	
	Scopro che nessu <code>db_blahblah*</code> fa quello che dovrebbe fare.
	Perché? Boh!
	br#
	Per puro caso, in questo settore si trovano un <em class="war">raley point
	quanto-gravitonico</em> ed anche un <em class="dacav">antico oracolo</em>
	dello spazio esterno: entrambi si sono offerti di aiutarmi, il primo con un
	ambiente di traduzione funzionante che misteriosamente produce il
	<code>.deb</code> che mi serve; l'altro con un intero pianeta in affitto (a
	prezzi vantaggiosi) che potrebbe permettermi non solo di fare e di
	compilare, ma anche di allevare una mandria <em>yak</em>, come ho sempre
	desiderato.

	Non so di chi fidarmi.
tab#m01
	title#Data Astrale [<code>M01a</code>] <em>17/04</em> 2012
	E insomma… devo concludere che <em>alien</em> <strong>non funziona</strong>.
	Non sono in grado di isolare il problema, non riesco a tracciarlo, non c'è
	niente di evidentemente rotto sul mio sistema (che funziona perfettamente) e
	non ci sono problemi d'installazione o di pacchetti o di alcunché.

	Ma <strong>non funziona</strong>: sarà colpa di <em>Ridley Scott</em>,
	immagino. C'è un bottone che deve fare la cosa mi serve e non la fa. Mi dice
	d'averlo fatto, ma mente. Tutti i singoli componenti della procedura
	sembrano a posto, ma assieme non fanno quel che devono fare. Non c'è niente
	di rotto, come lo aggiusto? Non lo si può fare; farò altro.
	br#
	Dopo aver lungamente consultato l'<em>Internet</em>, mi trovo costretto ad
	accettare il fatto che <strong>sono l'unico al mondo ad avere questo
	problema</strong>. Non c'è altra soluzione fattibile se non quella di
	affrontare il problema a basso livello, come facevamo
	link#Storie/2011/LII/#una volta###.
	begin#outside
		speak#gods#Signora Uhura, mi colleghi con tutti i ponti
		speak#em#Subito, Capitano. È in linea, signore
		speak#gods#Qui è il Capitano. Annuncio ufficialmente che il tentativo di recuperare la tecnologia aliena è fallito
		speak#gods#Questa nave procederà nella missione secondo i dettami di <em>Kegel&amp;Custer</em>, alla vecchia maniera
		speak#gods#Le vostre <strong>ossa, tendini e metallo</strong> faranno la differenza; mi aspetto il meglio da tutti voi
	end#outside
	E dopo questo ottimo discorso, mi sono messo lì con il mio secondo.
	sec#
	title#Data Astrale [<code>M01b</code>] <em>17/04</em> 2012
	Costringendo <em>alien</em> a creare delle cose, o meglio
	<strong>vietandogli</strong> di cancellarle dopo aver finito (finito
	<em>cosa</em> poi?…) e poi – sentite schioccare il mio vecchio <em>guanto di
	gomma</em> per [<code>ispezioni</code>] – mi sono estratto gli eseguibili
	binari e me li sono messi da parte. Proprio come facevamo <em>io&<em
	class="jazz">Jazz</em></em> una volta.

	Non sono affatto fiero di questo. Volevo installare un pacchetto del cazzo,
	per farlo bastava un unico comando, e invece mi tocca far <code>alien -g
	mtwk-lnx-powerpc-cazzocazzo-versione-blah.blah-yadda</code>, copiare e
	spostare la roba in giro, buttare via cose, tenerne altre. Ed è solo il
	secondo giorno.

	>That FEEL when.
tab#m02
	title#Data Astrale [<code>M02</code>] <em>20/04</em> 2012
	Dopo aver estratto il <code>cross-compilatore</code> ed averlo messo nella
	sua gabbietta, nutrendolo con un <em>secchio di teste di pesce</em> ogni
	settimana, pare che funzioni: compila l'<code>helloworld.c</code> per
	l'architettura giusta. Al primo colpo.

	Ora, resterebbe da fare tutto il resto. Controllo il settaggio di
	<em>minicom</em>, attacco la scheda alla corrente, accendo e vedo che
	succede. Dovrebbe rispondermi un qualche <em>Linux</em> con sopra null'altro
	che <em>BusyBox</em>, ma questo non succede.

	Faccio <em>dooddaddoo</em> per un po', poi chiedo aiuto. Compaiono <em
	class="jazz">Jazz</em> e <em class="dacav">Simgi</em>, che mi confidano che,
	per prima cosa, è il caso di <em>regolare <code>minicom</code> per la
	corretta velocità</em> e per seconda cose, <em>accendere la scheda</em>.
	Scopro infatti che questo piccolo aggeggio non prende corrente e basta, ma
	va effettivamente acceso.
	
	Ammetto che
	inline#gods#Non ci sarei mai arrivato, da solo, temo
	ma questa è un'altra storia.
	br#
	In ogni caso, con l'aggeggio in funzione, come verifico che il mio novello
	<code>test</code> sia stato compilato correttamente? Tento di attaccare la
	rete <code>LAN</code>. Ma dove? La scheda dispone di sei porte
	<code>Ethernet</code>: ne provo una, e <code>ping</code>o al volo.
	Immediatamente, trasmetto l'eseguibile di prova con <code>netcat</code>, che
	però si rifiuta. La connessione non gli piace.

	Immagino che dovrò <em>sedurre</em> sia <code>nc</code> sia la scheda, in un
	complesso triangolo che mi permetterà di farli felici entrambi.
	reverse#
	inline@forte#gods#È l'unico modo!
tab#m03
	title#Data Astrale [<code>M03</code>] <em>22/04</em> 2012
	Ed eccomi! Attraverso vari tentativi (<em>a casaccio</em>, secondo il
	<em>metodo scientifico</em>) sono stato in grado di individuare la corretta
	porta <code>Ethernet</code>, ossia quella che risponde a <code>eth0</code>.
	Il manualetto tecnico mi dice che le sei prese, dall'alto verso il basso, da
	sinistra a destra, sono enumerate <code>Enet0~5</code>; l'ultimo è un
	<code>Marvell PHY eTSEC2 RGMII/SGMII</code>, gli altri cinque sono dei
	semplici <code>eTSEC1 RGMII</code>. Qualunque cosa voglia dire.

	Ora, quelle che reagisce (<em>dmesg</em> mi dice qualcosa) è quello diverso
	dagli altri (<em>diverso</em> nel senso di <em>speciale</em>), ed io con
	questa connessione tento di comunicare. Il <code>ping</code> va, ma
	<code>nc</code> ancora no. In entrambe le direzioni, con contenuti o anche
	senza, su ogni combinazione di porte, le connessioni mi vengono rifiutate.

	Non riesco neanche ad aprire una connessione. Mi sento un cane.
	br#
	Trullallà. Visto che sono un giocatore abbastanza esperto e mi ricordo
	quelll che dice il <em>Credo dell'Assassino</em>,
	begin#outside
		inline#em#Niente è reale, tutto è lecito
	end#outside
	mi sono messo a <em>sfrugnare</em>. Un po' come si faceva una volta, per far
	funzionare <code>make</code>, provo con i parametri: in più, in meno, in
	ordine sparso.

	Ottengo la trasmissione di qualcosa soltanto con
	begin#inside
		<code>nc &lt;IP address&gt; &lt;port&gt;</code> sulla scheda
	end#inside
	begin#outside
		reverse#
		<code>nc -l -p &lt;port&gt; -q0</code> sul portatile
	end#outside
	in tutti gli altri casi la connessione continua ad venirmi rifiutata. Credo
	sia colpa di entrambe le versioni, una di qua e una di là. Boh. Ma ora mi
	sento <em>un pochino</em> meno cane.

	Ora devo capire come mai la persistenza della scheda non coincide con la
	millanta volatilità del <em>filesystem</em> che dovrebbe stare solo in
	<code>RAM</code>. Boh.
tab#m04
	title#Data Astrale [<code>M04</code>] <em>04/05</em> 2012
	Ora, ammetto che lavorare a questa cosa di stia stancando più di ogni altra
	cosa. Nella vita intera. Comunque.

	Sono riuscito ad installare sia <code>bootp</code> sia <code>tftpd</code>,
	per trasferire i binari alla scheda via rete. Sono riuscito a parlare con il
	menu di <em>uboot</em> tramite porta seriale. Sono riuscito anche ad
	estrarre l'immagine del <code>rootfs</code>, a montarla, metterci dentro
	delle cose, rimpacchettarla e adesso provo a mandarla.
	begin#outside
		Dato l'originale <code>rootfs.ext2.gz.uboot</code>, bisogna tagliargli
		la testa (i primi <code>64bit</code> di header) con <code>dd
		if=rootfs.ext2.gz.uboot of=rootfs.ext2.gz bs=64 skip=1</code> per
		ottenere un semplice archivio, da estrarre con <code>gunzip</code> o
		simili.

		Poi lo si deve montare con <code>mount -t ext2 -o loop,rw rootfs.ext2
		/path/to/mountpoint</code>, infilarci tutta la fuffa che vi va (per ora,
		il mio <em>heloworld</em> e nient'altro) e poi rimetterlo assieme, pronto
		per il traserimento. Prima si prepara l'archivio con <code>find
		/path/to/mountpoint | cpio -o -H newc | gzip --best >
		rootfs.hw.gz</code> e poi lo si trasforma nell'immagine con
		<code>mkimage -A ppc -O linux -T ramdisk -C gzip -a 0 -e 0 -n HelloWorld
		-d rootfs.hw.gz rootfs.hw.uboot</code> e il resto è nebbia.
	end#outside
tab#m05
	title#Data astrale [<code>M05</code>] <em>07/05</em> 2012
	Dunque. Mettere assieme l'immagine non è stato sufficiente, ovviamente.
	Bisogna poterla passare alla scheda. Facile, in teoria.

	In teoria… basterebbe preparare i due server, <code>bootp</code> e
	<code>tftpd</code> e lasciare che la scheda faccia da sola. E invece.

	Non so come, non so perché, ma. La scheda non è recettiva come vorrei, non è
	nemmeno recettiva come ci si potrebbe aspettare: l'ambiente di
	<code>uboot</code>, per quanto bellino e buonino e tutto, funziona soltanto
	tramite “variabili d'ambiente” che possono contenere valori così come
	comandi. Tutto è basato su queste coppie chiave/valore, nel bene e nel male:
	moltissimi comandi integrati si basano su valori contenuti i queste
	variabili (l'<code>help</code> non lo sa, ma il manuale sì) che sono
	<code>&gt;9000</code>. L'ambiente è sporchissimo, pieno di questa cagate,
	alcune da usare, alcune da evitare, alcune dannose.

	Tutto quel che può fallire, lo fa silenziosamente. Porchi e madonne. Ma alla
	fine, <em>gigiolando</em> con le configurazioni di tutto, son riuscito a far
	passare un file. Ora devo convincere la scheda a <em>metterselo nel posto
	giusto</em> e poi partire da lì. Che ci vorrà mai?
tab#m06
	title#Data Astrale [<code>M06</code>] <em>08/05</em> 2012
	Non va. Niente di quello che faccio funziona. Tutto quello che riesco a
	passare alla scheda, lei me lo scazza. Niente di quel che passo viene
	accettato o fatto funzionare in alcun modo.
tab#m07
	title#Data Astrale [<code>M07</code>] <em>10/05</em> 2012
	Insomma, è un problema di locazioni. Kernel sul <code>0x300000</code> e
	immagine sul <code>0x500000</code> funziona: da un errore diverso dal
	normale. Poi il <code>device tree</code> lo metto su <code>0x7f0000</code> e
	<code>bootm</code>mo il tutto.

	In più, ho smesso di creare l'immagine con la proceduara all'inizio. Adesso
	monto il filesystem in lettura/scrittura, ci scrivo la roba, smonto (forse
	neanche serve), <code>gzip</code>po il filesystem modificato, ne creo
	l'immagine e poi la trasferisco sulla scheda. E pensa un po', funziona.
tab#m08
	title#Data Astrale [<code>M08</code>] <em>11/05</em> 2012
	Sono stanchissimo, per motivi esterni (la <em>vita vera</em>…) e non mi sono
	impegnato tanto. Ma c'è una cosa semplice (?) e rapida (?) che posso fare:
	lo <code>script</code>ino del Destino per l'avvio automatico.

	E l'ho fatto! Funziona.
	br#
	La variabile <em>bootcmd</em> dell'ambiente di <em>uboot</em> diventa
	begin#inside
		<code>setenv bootcmd "setenv loadaddr 100000; dhcp; autoscr 100000"</code>
	end#inside
	mentre il file che viene effettivamente trasferito contiene
	begin#outside
		<code>
		p#tftp 0x300000 uimage
		p#tftp 0x500000 helloworld.img
		p#tftp 0x7f0000 mpc8313erdb.dtb
		p#bootm 0x300000 0x500000 0x7f0000
		</code>
	end#outside
tab#m09
	title#Data Astrale [<code>M09</code>] <em>17/05</em> 2012
	Da ieri ancora mi cola il naso… è un po' che non scrivo, ma faccio cose.
	Ora, tutto quel che ho fatto funziona; quel che manca, no. Succede che, per
	quanto io mi sforzi, <code>ptpd</code> necessita di cose che non ci sono, e
	per quanto il driver della <code>Vitesse VSC7385</code> risulti installato,
	l'hub di rete non risponde.

	Torno all'opera sulle cose che sento di poter controllare (perché se
	<code>ifconfig</code> mi riconosce le connessioni sulle porte ma le porte
	non funzionano, io non che cazzo farci…) e verifico che il <code>ptpd</code>
	parte e subito mi richiede <code>pgrep</code>. Come fare?

	intra@gods#Beh@mi dico@ricompilerò <code>BusyBox</code> perché integri anche
	<code>pgrep</code> con tutto il resto
	e mi metto all'opera. Con la versione più recente, <code>1.20.0</code>, che
	però sembra dare parecchi problemi: un certo modulo <code>ionice</code> si
	pianta; lo tolgo (serve soltanto per schedulare i processi) e vedo che altri
	moduli danno errore… uhm… proverò a tornare un po' indietro.

	intra@gods#Ehy, Freescale@chiedo@che versione monti?
	e scopro che c'è l'antichissima <code>1.1.3</code>, del 2007. Proviamo altre
	versioni… nuove, vecchie, meno vecchie… uhm… No. Nessuna compila. Dev'essere
	colpa del mio compilatore merda.

	Allora provo con <code>BuildRoot</code>, un tool che <em>“dovrebbe fare
	tutto”</em>. <strong>“DOVREBBE”</strong>.

	Intanto, mi tocca installare <code>bison</code> e <code>flex</code>. E
	funziona? Al primo colpo? Ah, mi son di compilare il kernel… dunque…
	versione <code>3.2.6</code>? Vabbene…
tab#m10
	title#Data Astrale [<code>M10a</code>] <em>18/05</em> 2012
	Progressi? Vediamo un po'… intanto, il nuovo kernel è piuttosto ciccione
	(<code>2.6MB</code>) mentre il ramdisk è snello (<code>600KB</code>) ed ho
	dovuto cambiare lo script di inizializzazione (adesso carica su
	<code>0x300000 0x600000 0x7f0000</code>). Perché? Non lo so.

	Ho scelto poche opzioni: ramdisk, output principale sulla seriale
	<code>ttyS0</code> e la configurazione base del kernel per la scheda
	(<code>arch/ppc/83xx/mpc8313_rdb_defconfig</code>). E poi yadda…
	<code>¾h</code> per scaricare i sorgenti e compilare… molta yadda, ma tutto
	termina correttamente. 

	Butto la roba sulla scheda e <code>boot</code>to. Ma non funziona: il kernel
	si pianta immediatamente, appena scompattato.
	sec#
	id#m10.2
	title#Data Astrale [<code>M10b</code>] <em>18/05</em> 2012
	Boh. Non funziona: ho tentato varie combinazioni sugli indirizzi
	dell'upload, alcune si piantano direttamente, alcune si piantano dopo lo
	scompattamento del kernel.

	Ho temuto che fosse un errore nella configurazione dell'output, ho provato a
	cambiare porta seriale, a mettere mano direttamente alla configurazione sul
	ramdisk… non funziona.

	Proseguo allora con un kernel più vecchio (il <code>2.6.36</code>, com'hanno
	fatto <em>Marco&amp;Mirko</em>) sperando che le cose cambino.
	sec#
	id#m10.3
	title#Data Astrale [<code>M10c</code>] <em>18/05</em> 2012
	E non cambiano. Ma sono disperato e provo di tutto. Ora, forse il kernel
	nuovo non va con questo ramdisk… magari quello vecchio…

	Contro ogni aspettativa, cambiando un po' di offset per farci star tutto,
	ecco che parte. La <code>SgaggioBoard</code> vive! Posso anche montare
	localmente il filesystem e installarci la roba.

	Ma poi non funziona. Quel che installo io, che non è un link a BusyBox, non
	funziona. La <code>bash</code> mi dice di non trovare il file… boh. Sono
	così vicino… ma ancora 'sto stronzo non si decide a funzionare.

	Grazie al pacchetto <code>procps</code> ho anche il dannato
	<code>pgrep</code>, ma ora come ora non posso eseguire niente. Né il
	<code>ptpd</code> né tantomeno il mio <code>helloworld</code>… Come se non
	fossero lì.

	Se almeno capissi come la <code>toolchain</code> di questo mostro funziona,
	magari potrei ricompilare il <code>ptpd</code> con quel <code>gcc</code>, ma
	non lo trovo mica…
tab#m11
	title#Data Astrale [<code>M11</code>] <em>21/05</em> 2012
	Succede che niente di quel che tento funziona: se anche provo a compilare
	<code>helloworld/ptpd</code> staticamente, è il sistema sotto a non essere
	coerente: non tutto, infatti, è un link simbolico a <code>busybox</code>.
	Alcune cose (i comandi del pacchetto <code>procps</code>, ad esempio) sono
	eseguibili ELF giustamente e correttamente compilati. Hanno un unico
	problema, però: continuano, nonostante tutti i miei sforzi, ad essere
	compilati dinamicamente; quindi, vanno a cercare librerie che non esistono
	(e che non ci devono essere) e falliscono in una maniera strana.

	E <em>non dovrebbe</em> essere così difficile farli funzionare, visto che si
	tratta di strafottute <code>applet</code> di busybox, fatte apposta per
	essere compilate staticamente assieme al resto. Ma dopo un giorno di
	smanacciamento, di configurazioni via via più stiracchiate e assurde, di
	compilazioni e di aggiustamenti, <em>nada</em>.
	br#
	Sono infine tornato a tentare (grazie a qualche progresso con lo script di
	avvio dovrei riuscire ad <code>upload</code>are parecchi <code>mega</code>
	di dati. Dati funzionanti) di far partire l'intero <em>ambaradan</em>
	kernel+rootfs, sperando che. Forse, nascendo tutto assieme, potrebbe essere
	un sistema coerente.

	Se anche questo non dovesse bastare, allora metterò le mani nel sorgente di
	<code>ptpd</code> e ci infilerò l'<code>hax</code>.
tab#m12
	title#Data Astrale [<code>M12a</code>] <em>22/05</em> 2012
	Come mai mi aspetto che le cose funzionino? Non lo so… forse sono stato
	educato male.

	Mi sono arreso. Ho messo le mani nei sorgenti di <em>ptpd</em> e vaffanculo.

	<code>CC=/opt/thesis/cross/bin/powerpc-linux-gcc CFLAGS=-fPIC
	LDFLAGS=-static make</code> m'ha permesso di produrre un eseguibile
	funzionante. Credete che questo basti?
	sec#
	title#Data Astrale [<code>M12b</code>] <em>22/05</em> 2012
	No. Ovviamente.
	
	Si tratta, ora di trovare un sostituto ad un certo frammento di codice che
	manda tutto a puttane. Cos'è?
	begin#outside
		<code>pgrep -x %name | wc -l</code>
	end#outside
	Una cazzata. Che però è quasi insormontabile: ci sono delle orribili
	differenze (di versione, di comandi e di opzioni per questi comandi) tra il
	mio sistema e quello di destinazione. Senza contare che quello stronzo di
	<code>ps</code> – unico comando vagamente compatibile – non riesce ad
	ignorare se stesso. Ma non sempre: ho verificato <em>empiricamente</em> come
	l'output di <code>ps | grep %name | wc -l</code> si estremamente instabile
	(<code>±1</code>) mentre una cosa come <code>ps | awk '{print $5}' | grep
	-c %name</code> invece sembra più stabile.

	Ma non basta: mi tocca togliere manualmente il risultato fasullo nel caso ci
	sia. E come faccio a sapere se c'è veramente? Spero.

	Adesso scrivo a Sgaggio. Le cinque dannate della <em>Vitesse</em> ancora non
	vanno.
	br#
	Tecnicamente, sono sul vecchio kernel originale, sul vecchio filesystem
	originale, ho soltanto aggiunto il ptpd tramacciato. Non sono contento. Non
	sono affatto contento.
tab#m13
	title#Data Astrale [<code>M13a</code>] <em>23/05</em> 2012
	Dunque. Ora sono qui con due diverse versioni del <em>ptpd</em>, una in
	locale sul mio <em>Tanngrisnir</em>, una in remoto sulla scheda. Quella
	locale è relativamente intoccata, quell'altra è tramacciata.

	Funziona. 
	sec#
	title#Data Astrale [<code>M13b</code>] <em>23/05</em> 2012
	Mi sono messo a sistemare le altre porte di rete. Mi sono messo lì, ho
	ricontrollato il mio fido <em>Blah on MPC8313ERDB release.pdf</em> per
	verificarne i numeri, poi <em>yadda&amp;contro-yadda</em> e infine, nella
	disperazione di quelle povere lucette spente, ho ricontrollato anche
	l'ambiente di uboot.

	Facendoci casi, ho notato i due comandi <em>run_vscld</em> e
	<em>update_vscfw</em>. Controllando bene il contenuto di questi due
	pisquani, ho scoperto la stessa procedura, esattamente quello
	<em>Marco&amp;Mirko</em>. E mi son detto
	inline#gods#Cosa potrebbe mai andare storto? Se ci riprovo… per la quinta volta…
	e pensate un po'… beh, <strong>ha funzionato</strong>.

	I led di tutte le porte si sono accese, l'interfaccia
	<code>TSEC0/eTSEC1/eth0</code> ha cominciato a rispondere ai
	<code>ping</code> e yadda. Sono commosso, non me l'aspettavo proprio. Sembra
	che avesse a che fare con l'indirizzo <code>0xfe7fe000</code>, una locazione
	specifica della ROM nella quale, evidentemente, il
	<code>vsc7385_load.bin</code> si aspetta di trovare il firmware. Come e
	perché non è dato sapere. Non a me, almeno.
	br#
	Prima che lo chiediate: sì, ho riavviato per verificare che non si trattasse
	di un colossalmente improbabile&amp;fortunato stato quantico dei dintorni.
	Funziona veramente. Ora, ovviamente, dovrò dormire con la scheda
	sottobraccio, per evitare che qualcuno ci metta mano e rovini la nostra
	felicità.
	sec#
	title#Data Astrale [<code>M13c</code>] <em>23/05</em> 2012
	Mi sono messo a controllare la configurazione del sistema sulla scheda.
	Tutti i servizi partono da <code>/etc/rc.d/rcS</code>, uno script della
	morte che si cuccia i paramentri dall'<code>rc.conf</code> (tra i quali gli
	indirizzi di rete, ai quali ho messo mano…) e una lista di script da
	chiamare, tutti aventi base in <code>/etc/init.d/</code>.

	Non dovrebbe essere troppo difficile imitare <code>update-rc.d</code>,
	infilare i dovuti comandi nei posti giusti e far partire il mio
	<em>ptpd</em> all'avvio in modo automatico. Non dovrebbe. Ecco, l'ho detto.
tab#m14
	title#Data Astrale [<code>M14</code>] <em>28/05</em> 2012
	Mi sono messo a sistemare cosucce… ho scoperto che il messaggio che compare
	prima del login è il contenuto di un certo <code>/etc/issue{.net}</code> che
	viene semplicemente sbrodolato su <em>stdou</em> prima del login. L'ho
	cambiato.
	br#
	Poi sono andato a cercare il modo di settare la <em>password</em> senza
	dover passare per il comando <code>passwd</code>, visto che non posso
	eseguirlo (e mantenerne gli effetti, anche se…); ho quindi cercato e
	smanacciato finché ho scoperto il file <code>/etc/passwd/</code> che
	contiene una lunga serie di cosucce interessanti, che sarebbero una file di
	<em>entry</em> ognuna dedicata ad un certo utente con una certa
	<em>password</em>, con certi <em>permessi</em>, su un certo <em>path</em>. E
	basta inserire un opportuno <em>hash</em> per ottenere quello che volevo
	ottenere.
	br#
	Poi mi sono dedicato all'ultimo problema: ogni volta che il <em>link
	fisico</em> viene attivato/disattivato sull'interfaccia <code>eth1</code>,
	ossia la <code>TSEC1/eTSEC2</code> ossia la solita porta di rete, salta
	fuori un bel messaggio
	begin#outside
		reverse#<code>PHY: link w4kbntc3hjg5hgjwn5tg6htxjqsh5kgj is UP
		1000/FULL</code>
	end#outside
	che se capitasse soltanto sull'opportuno <code>/var/log/klog</code> allora
	andrebbe bene, perché lo vedrei solo con <code>dmesg</code>; ma questo
	stronzo mi salta fuori (anche) direttamente <em>stdout</em> prima (o
	durante, in realtà) il login. E a me questo <em>giggiola i giggioli</em>. Ho
	chiesto al demone <code>klogd</code> (scusate, avrei dovuto dire
	<em>dæmone</em>…) come metterlo a tacere… lui (il manuale <em>online</em>)
	m'ha detto di usare le opzioni <code>-s -n</code>. Le ho infilate nella
	variabile d'ambiente <code>$KLOGD_OPTIONS</code>, che viene utilizzata dallo
	script <code>/etc/rc.d/init.d/syslog</code> in un qualche momento
	dell'avvio… succede però che nessuna di queste opzioni sortisce l'effetto
	desiderato. Immagino che chiunque stampi questo messaggio lo sbrodoli su
	<em>stdout</em> personalmente&amp;direttamente&amp;volontariamente. Quindi –
	<em>fanculo i Gem Boy e i loro seguaci</em> – mi rassegno.
tab#m15
	title#Data Astrale [<code>M15</code>] <em>31/05</em> 2012
	Dunque. Passa il tempo, mi spacco le palle, leggo e faccio cosucce.
	br#
	stitle@right#Ripristino
	Ho ripristato l'installazione originale della scheda, che comprende:
	begin#outside
	begin#ul
		p#l'immagine del kernel <code>loot/uimage</code>, <code>Linux-2.6.20,
		PPC, GZip</code> alla locazione <code>0xFE100000</code>
		p#l'immagine del filesystem <code>loot/rootfs.ext2.gz.uboot</code>,
		<code>RAMDisk Linux/PPC GZip</code> alla locazione
		<code>0xFE300000</code>
		p#il blob del devicetree <code>loot/mpc8313erdb.dtb</code> alla
		locazione <code>0xFE700000</code>
	end#ul
	end#outside
	Questa installazione può essere avviata tramite <code>run
	bootcmd.orig</code> dal menu di <em>uboot</em>; alternativamente, ho scritto
	anche <code>dev/original.sh</code> che lo fa via <code>tftpboot</code>. Per
	questo filesystem, la password di root è <code>root</code>.
	br#
	stitle#Altre configurazioni
	Normalmente faccio il boot trasmettendo tutto (kernel &amp; filesystem &amp;
	device tree) ma ho scritto anche un'altra configurazione,
	<code>dev/light.sh</code> che trasmette soltanto il filesystem, utilizzando
	il kernel e il device tree dalla <em>FLASH</em> sulla scheda. Queste ultime
	due utilizzano il mio filesystem modificato.

	Su di esso è installato <code>/sbin/ptpd2</code> (la versione tarocca). Ma
	adesso sono in possesso di un nuovo (e tramaccioso) <code>pgrep</code> che
	potrebbe anche funzionare.
tab#m16
	title#Data Astrale [<code>M16</code>] <em>01/06</em> 2012
	E fu la <em>tempesta</em>. Ho passato <code>3h</code> nel <em>laboratorio
	Aula 5</em> con <em>Sgaggio</em> al fianco, dimostrando <code>IRL</code>
	tutti i risultati ottenuti fino ad ora. A <em>Sgaggio</em> piacque.
	br#
	Sono dunque in possesso di una mappa per continuare la mia impresa; le cose
	da fare sono tre:
	begin#outside
	begin#ul
		p#comporre una guida su come ripercorrere la mia strada, rendendo
		possibile ad altri di eseguire il mio lavoro, se &amp; quando sarà
		necessario – possibilmente in inglese, perché sia più diffondibile;
		p#esplorare il codice sorgente di <code>ptpd</code>, in particolare in
		modo da individuare le chiamate che trattano e gestiscono i
		<em>filtri</em>; su di essi <em>«io &amp; Daniele»</em> metteranno mano
		in modi loschi;
		p#preparare la catena di dispositivi per realizzare i test, ossia
		attaccare il <em>Master Clock</em> a quel particolare <em>switch
		industriale da catena di montaggio</em>, a quello poi attaccare il
		<em>vicemaster</em>, una – o forse anche due – <em>Freescale
		MPC8313erdb</em> e poi anche due altri kit che stanno inscatolati sopra
		un armadio
	end#ul
	end#outside
	L'intera faccenda è meravigliosamente eccitante, anche se sento arrivare una
	terribile quantità di rogne, nonché porchi&amp;madonne da tirare, nonché un
	incredibile quanto inaspettato <code>WAT</code> che ho tirato di fronte a
	<em>Sgaggio</em>:
	br#
	Siam finiti a parlare dell'età della scheda e del suo sistema operativo, ed
	io me ne esco con un
	intra@gods#Eh già, è vecchiotta, poi 'sto Linux qui è stato compilato nel 2007, è ancora una versione <code>2.6.20</code>
	e mentre lo dico digito un <code>uname -a</code> per controllare, mi esce
	un <code>Linux 2.6.36-4</code> compilato nel 2011. Mi cascano gli occhi.
	Deve essere quello che <em>Marco&amp;Mirko</em> c'hanno schiaffato sopra
	durante i loro <em>pastrugnamenti</em>. Avendolo scoperto davanti a Sgaggio,
	un po' mi sono vergognato e un po' mi sono stupito, ma visto che si può fare
	veramente, ho deciso di riprovarci. Ad ogni costo.
tab#m17
	title#Data Astrale [<code>M17a</code>] <em>02/06</em> 2012
	Segue il delirio; tornato a casa dopo un pranzo a <em>Vigolo</em> con nonni
	&amp; zio &amp; cuginetti &amp; fratello con la morosa, decido ch'è il caso
	di tentare… questo è quel che ho fatto. O almeno credo.
	begin#outside
	begin#ul
		p#Toolchail RPC
		p#<code>make Kernel 2.6.36-4</code>
		p#<code>Busybox 1.1.18</code>, tolti nslookup ping6 traceroute
	end#ul
	end#outside
	sec#
	title#Data Astrale [<code>M17b</code>] <em>02/06</em> 2012
	begin#outside
	begin#ul
		p#<code>touch /opt/thesis/expdev/disk.ext2</code>
		p#<code>mkfs.ext2 /opt/thesis/expdev/disk.ext2</code>
		p#<code>mount disk.ext2 /media/lol</code>
		p#<code>busybox: make install -> /media/lol</code>
		p#<code>mkinit ~ /media/lol</code>
		p#???
		p#PROFIT!
	end#ul
	end#outside
	Ora devo scoprire la dimensione del fs originale, e opiare le librerie in
	/lib, controllare i link…
tab#m18
	title#Data Astrale [<code>M18a</code>] <em>03/06</em> 2012
	Sono ad un ottimo punto, ma ci sono ancora molte cose da sistemare e far
	funzionare. Per prima cosa, ho ricompilato la <em>toolchain</em> ancora una
	volta: questa volta, aggiungendo il supporto per ogni cagata: file &gt;
	<code>2GB</code>, IPv6, RPC e WCHAR. Fa tutto parte delle opzioni per la
	toolchain dentro <em>buildroot</em>.
	br#
	Poi. Ottenuta la toolchain, ci si compilano il kernel e busybox.
	Separatamente.
	br#
	Poi. Il kernel, per conto suo, procude la <code>uImage</code> già pronta,
	non serve altro. Busybox invece prepara le sue cose e le può installare in
	un certo folder; bisogna preparare il disco, quindi. Per farlo, uso il
	comando <code>/sbin/mkfs.ext2</code>. Per l'estensione del disco (ossia il
	numero di blocchi da <code>1KB</code>) mi sono appoggiato all'immagine
	originale, che vedo essere attorno ai <code>10240</code> blocchi).

	Ma non è finita: da sola, Busybox non vale un sistema funzionante, bisogna
	ancora aggiungere della fuffa, come le cartelle del sistema (<code>dev etc
	etc/init.d proc sys</code>) e i due importantissimi file
	<code>/etc/inittab</code> e <code>/etc/init.d/rcS</code>, senza i quali il
	sistema non parte. È anche essenziale ricordare che <code>rcS</code> deve
	avere i permessi di esecuzione. Altrimenti…

	Quindi, ecco delle guide.
	sec#
	title#Data Astrale [<code>M18b</code>] <em>03/06</em> 2012
	title@right#<strong>TOOLCHAIN</strong>
	<code>cd buildroot/
	p#make defconfig
	p#make menuconfig</code>
	p#Si può togliere tutto: il kernel, busybox, yadda… basta che la toolchain sia
	completa. Aggiungere il supporto per i grandi file, IPv6, RPC e WCHAR è
	necessario per far compilare Busybox (separatamente) al primo colpo.
	p#<code>make</code> (e poi <em>taaaaaaaaaanta</em> pazienza)
	p#Poi, per avere facile accesso
	p#<code>ln -s buildroot/output/host/src/ /opt/freescalecrosstool/</code>
	p#Per proseguire felici, basta esportare alcune variabili
	p#<code>export ARCH=powerpc
	p#export CROSS_COMPILE=powerpc-linux-
	p#export PATH=/opt/freescalecrosstool/bin:$PATH</code>
	sec#
	title#Data Astrale [<code>M18c</code>] <em>03/06</em> 2012
	title@right#<strong>KERNEL</strong>
	<code>cd linux[-2.6.36-4]/
	p#make 83xx/mpc8313_rdb_defconfig
	p#make menuconfig</code>

	A me pare che non ci sia nulla da mettere o togliere.

	<code>make uImage
	p#make mpc8313erdb.dtb</code>
	
	Entrambi questi file sono pronti per essere caricati.
	sec#
	title#Data Astrale [<code>M18d</code>] <em>03/06</em> 2012
	title@right#<strong>BUSYBOX</strong>
	<code>cd busybox[-1.1.19]/
	p#make defconfig
	p#make menuconfig</code>

	A me pare che non ci sia nulla da mettere o togliere. Se necessario,
	modificare la <code>INSTALL_DIR</code> sulla locazione desiderata
	(<code>/media/BlackUp</code> per il sottoscritto).

	<code>make</code>

	Seguono ora le rogne. Bisogna produrre il disco e trasformarlo in un sistema
	completo.
	
	<code>touch disk.ext2
	p#/sbin/mkfs.ext2 disk.ext2 10240
	p#mount disk.ext2 /media/Black -t ext2 -o loop,rw
	p#cd busybox && make install
	p#cd /media/BlackUp && mkdir dev etc ect/init.d proc sys
	p#touch etc/inittab etc/init.d/rcS
	p#chmod +x etc/init.d/rcS</code>
	begin#mini@left
		stitle@right#/etc/inittab
		<code>::sysinit:/etc/init.d/rcS
		p#::askfirst:-/bin/sh</code>
	end#mini
	begin#mini@right
		stitle@left#/etc/init.d/rcS
		<code>♯!/bin/sh
		p#mount -t proc none /proc
		p#mount -t sysfs none /sys
		p#/sbin/mdev -s</code>
	end#mini
	Il contenuto minimale dei due file è listato qui accanto.

	Una volta completato, il disco va smontato, compresso ed etichettato come
	immagine per <em>uboot</em>. Nell'ordine:

	<code>umont /media/BlackUp
	p#gzip --best -c disk.ext2 &gt; disk.gz
	p#mkimage -A ppc -O linux -C gzip -T ramdisk -a 0 -e 0 -d disk.gz -n RamDisk
	disk.img</code>
	sec#
	dd if=/dev/zero of=disk.ext2 bs=1024 count=20480
	/sbin/mkfs.ext2 disk.ext2 20480 -F -m 0 -b 1024 
	mount -t ext2 -o loop,rw disk.ext2 /mount/point
	cp /opt/crosstool/powerpc-linux/sysroot/* /mount/point
	cd busybox && make CONFIG_PREFIX=/mount/point install
	/etc ~ inittab ~ rcS…
	chown root.root /mount/point -r
	umount
	gzip
	mkimage
	sec#
	title#Data Astrale [<code>M18e</code>] <em>03/06</em> 2012
	title@right#Last try on the <strong>CLEAN WAY</strong>
	begin#inside
		<code>cd buildroot
		p#make defconfig
		p#make menuconfig</code>
		<code>target architecture → powerpc
		p#target architecture variant: generic
		p#target ABI: classic
		p#build option → number of jobs → 5
		p#toolchain → kernel header version 2.6.36.x
		p#toolchain → support for large files, IPv6, RPC, WCHAR
		p#system configuration → hostname, issue message
		p#filesystem → ext2, gzip
		p#package selection → show packages provided by busybox
		p#package selection → network → netcat
		p#package selection → system tools → procps
		p#(package selection → text editors → vim)
		p#kernel → version “same as toolchain headers”
		p#kernel → defconfig name “83xx/mpc8313_rdb”</code>
		p#<code>make</code>
	end#inside
	
	E indovina un po'? <strong>NON FUNZIONA</strong>, lol.
	sec#
	title#Data Astrale [<code>M18f</code>] <em>03/06</em> 2012
	Dunque, visto che completare l'intera operazione soltanto con
	<em>BuildRoot</em> continua a non funzionare, torno a farlo a pezzi. Pare
	funzionare, nel senso che ottengo dei risultati: ho un <em>kernel</em> che
	fa il boot, ho un suo <em>devicetree</em>, ho anche un filesystem abbastanza
	decente… ma ho anche un nuovo problema: il sistema non riesce a scrivere
	niente.

	Ho passato qualche ora tentando di modificare il contenuto del file
	<code>/etc/init.d/rcS</code> in modo che montasse il <code>/dev/ram</code>
	non soltanto in lettura, ma anche in scrittura… e l'ho fatto. L'ho fatto in
	molti modi diversi; e non è bastato. Ergo, chiedo all'<em>internet</em> che
	mi trova questo tizio
	begin#outside
		reverse#<code>http://tldp.org/HOWTO/Bootdisk-HOWTO/buildroot.html</code>
	end#outside
	che mi dice delle cose interessanti. Fino ad allora, m'ero assicurato che
	il filesystem fosse montato <code>rw</code> con una chiamata a
	<code>mount</code>, controllando la dimensione e spazio occupato sul disco
	con <code>df</code>, che mi davano entrambi ragione. Ma poi il tizio mi
	consiglia di controllare gli <em>inode</em> disponibili, con <code>df
	-i</code>; scopro quindi che gl'ho esauriti. LOL.

	Mi toccherà creare un altro disco, e stavolta fare attenzione alle
	dimensioni degli inode, in modo da averne tanti.
	begin#outside
		<code>dd if=/dev/zero of=disk.ext2 bs=1K count=16000
		
		mkfs.ext2 disk.ext2 -F -m 0 32000</code>
	end#outside
	poi mi sono scritto un dannato script <code>mkinstall</code> che fa tutta la
	roba: copiare il <code>sysroot</code> dalla toolchain, creare le cartelle
	necessarie, copiare il contenuto in <code>/etc</code>, installare busybox e
	ptpd2. Sono stanco morto.
tab#m19
	title#Data Astrale [<code>M19</code>] <em>04/06</em> 2012
	begin#mini@right
		stitle#BuildRoot
		[ <code>2012-05</code> ]
		reverse#[ <a href="http://buildroot.uclibc.org">buildroot.uclibc.org</a> ]
		stitle#BusyBox
		[ <code>1.19.3</code> | <code>1.20.1</code> ]
		reverse#[ <a href="http://www.busybox.net">www.busybox.net</a> ]
		stitle#Kernel Linux
		[ <code>2.6.36-4</code> | <code>3.3.7</code> ]
		reverse#[ <a href="http://kernel.org">kernel.org</a> ]
	end#mini
	Oggi ci riprovo, nella maniera giusta. Per prima cosa, infatti, devo
	verificare che l'intera procedura come l'ho fatta io sia riproducibile; poi
	dovrei anche tentare di minimizzare le dimensioni del sistema che ho messo
	in piedi, visto ch'è decisamente troppo grande da installare sulla ROM della
	scheda.

	Quindi, ecco che ricomincio tutto da capo.

	Indicherò i percorsi relativi al <code>root folder</code> del progetto come
	fosse la <code>home</code>, quindi <code>~/buildroot</code> sarà il folder
	in cui <em>buildroot</em> è stato scompattato.

	Per i numeri di versione, fate riferimento alla tabella indicata qui a destra.
	br#
	stitle#BuildRoot
	Poiché ho sperimentato che <em>buildroot</em> è un ottimo strumento, pur non
	funzionando <em>out of the box</em> per il mio particolare caso, è davvero
	utile procurarselo e imparare ad usarlo. In questo caso particolare, pur non
	bastando da solo, è comunque in grado di produrmi un completo
	<em>crossompilatore</em> con tutto l'ambiente pronto (e funzionante).
	begin#outside
		<code>cd ~/buildroot
		p#make defconfig
		p#make menuconfig</code>
	end#outside
	Il menu interattivo di <code>kconfig</code> permette di navigare le opzioni
	configurazione. Per prima cosa, controllare l'<em>architettura</em> e la sua
	eventuale variante (per questo caso, <code>powerpc – generic</code>).

	Poi ci sono le opzioni per il <em>build</em>. Vi sono indicate la cartella
	dei <em>download</em> (in questo caso <code>~/loot</code>) e la cartella per
	l'<em>host</em>, ossia il crosscompilatore e contorno. Si può anche indicare
	il numero di <em>job</em> da far eseguire a <code>make</code>; è utile
	settare questo parametro ad [ <code>1 più il numero di CPU a
	disposizione</code> ]; questo processo parallelizza la compilazione e
	permette di risparmiare molto tempo.

	Poi ci sono le opzioni della <em>toolchain</em>. Scegliete accuratamente la
	versione degli <em>header del kernel</em>. Dovrebbe bastare, perché il resto
	– per quel che ho potuto provare – s'addatta.

	Per il resto, per la <em>selezione dei pacchetti</em>, il
	<em>filesystem</em> da generare e il <em>kernel</em>, basta deselezionare
	tutto. La <em>toolchain</em> è tutto quel che mi serve.
	begin#outside
		<code>make</code>
	end#outside
	A questo punto è bene andare al bagno, prendere un caffè, piegare della
	carta o magari scrivere un report come il presente, perché la compilazione –
	pur parallela – è una cosa lunga. D'altronde, in questa fase
	<em>buildroot</em> produce una spaventosa quantità di cose, in particolare
	tutti gli eseguibili di compilazione (<em>gcc, ld, ar</em> e compagni…) ma
	anche tutte le librerie di supporto necessarie, ed anche il folder
	<code>sysroot</code> che contiene molte cose utili (in particolare, le
	librerie da installare sul <code>targetfs</code>).

	Poiché il compito di <em>buildroot</em> è terminato, lo lasciamo stare. Per
	i nostri scopi, tutto quel che ci serve è il contenuto creato per l'host,
	che mi tengo da parte e mi assicuro che il <code>path</code> lo possa
	raggiungere:
	begin#outside
		<code>ln -s ~/buildroot/output/host/usr/ ~/crosstool
		p#export PATH=~/crosstool/bin:$PATH</code>
	end#outside
	br#
	stitle#Il kernel Linux
	Questa parte è staordinariamente &amp; sorprendentemente &amp;
	inaspettatamente semplice. È tanto lunga, ovviamente, ma nient'altro.
	Bisogna prima assicurarsi che l'architettura e il prefisso del
	crosscompilatore sia impostati correttamente. Questi parametri possono
	essere passati ad ogni chiamata di <code>make</code>, oppure esportati
	nell'ambiente della shell corrente
	begin#outside
		<code>export ARCH=powerpc
		p#export CROSS_COMPILE=powerpc-linux-</code>
	end#outside
	Ricordatevi di lasciare il trattino in fondo al prefisso del
	crosscompilatore. Fatto questo, si compila
	begin#outside
		<code>cd ~/linux</code>
		p#<code>make defconfig</code>
		p#<code>make 83xx/mpc8313_rdb_defconfig</code>
		p#??? make menuconfig → kernel options → high memory support ???
		p#<code>make uImage mpc8313erdb.dtb</code>
	end#outside
	Questa ultima chiamata procude sia l'immagine del <em>kernel</em> sia il
	<em>device tree</em>. Si trovano entrambi nel folder
	<code>~/linux/arch/powerpc/boot</code>.
	br#
	stitle#Busybox
	Questa questione è più complessa. Busybox è estremamente versatile ed
	estremamente configurabile, cosa selezionare e cosa no è strettamente legato
	alle nostre necessità.

	Tecnicamente, basta che sia presenti i pacchetti necessari per tenere in
	piedi il sistema e far girare <code>ptpd2</code>.
	begin#outside
		<code>cd ~/busybox</code>
		p#<code>make defconfig</code> OR <code>make allnoconfig</code>
		p#<code>make menuconfig</code>
		p#<code>make</code>
	end#outside
	La scelta sulla configurazione dipende da voi, dallo spazio disponibile sul
	dispositivo e dalle necessità degli applicativi che dovranno girare. La
	<code>defconfig</code> prepare una <em>busybox</em> “quasi completa”;
	significa che contiene praticamente ogni paccheto disponibile. La
	<code>allnoconfig</code> toglie tutto, lasciando a voi il compito di
	aggiungere <strong>SOLO</strong> quel che serve.
	br#
	stitle#Creare il RAMDISK
	Per prima cosa, ci occorre un filesystem (virtuale) sul quale installare
	tutto.
	begin#outside
		<code>dd if=/dev/zero of=destination.ext2 count=000</code>
		p#<code>/sbin/mkfs.ext2 destination.ext2 -F -m 0 32000</code>
	end#outside
	Tanto per essere sicuri, bisognerebbe controllare (con <code>df -i</code>
	una volta montato il disco) che il numero di inode sul disco sia abbastanza
	grande. Non si sa mai. Una volta montato, possiamo copiarci tutto il
	necessario.
	begin#outside
		<code>make CONFIG_PREFIX=/media/destination install</code>
	end#outside
tab#m20
	title#Data Astrale [<code>M20</code>] <em>05/06</em> 2012
	Oggi si tenta. Ogni cosa.
	begin#outside
		<code>kernel-headers-2.6.36-4</code>
		p#<code>uclibc 0.9.31 ~ 0.9.33</code>
		p#<code>kernel +highmemorysupport -ticklesssystem
		+highresolutiontimer</code>
	end#outside
	begin#inside
		<code>buildroot</code>
		p#<code>header 3.3.x</code>
		p#<code>uclib 0.9.33.x</code>
		p#<code>binutils 2.22</code>
		p#<code>gcc 4.7.x</code>
		p#<code>large file, ipv6, rpc, wchar</code>
	end#inside
	begin#outside
		<code>kernel 3.3.7 with 83xx/mpc8313_rdb_defconfig (-highmem +tickless
		+highresol)</code>
		p#<code>busybox 1.20.1 defconfig</code>
	end#outside
	begin#inside
		<code>buildroot</code>
		p#<code>header 3.3.x</code>
		p#<code>uclibc 0.9.33.x</code>
		p#<code>binutils 2.22</code>
		p#<code>gcc 4.7.x</code>
		p#<code>(large file, ipv6, rpc, wchar)</code>
		p#<code>busybox 1.20.x (+propcs)</code>
		p#<code>filesystem ext2+gzip</code>
		p#<code>kernel same with 83xx/mpc8313_rdb_defconfig</code>
	end#inside
tab#m21
	title#Data Astrale [<code>M21a</code>] <em>06/06</em> 2012 – <strong>VERYCLEAN</strong>
	Questa è, passo passo, la procedura da seguire per ottenere un sistema
	funzionante sulla scheda. Lunghe settimane di sperimentazione sono state
	condensate in questa guida.
	begin#outside
		reverse#<em>“Non prendete iniziative, altrimenti finirete come me”</em> – disse il GODS
	end#outside
	begin#half@right
		title#KConfig
		stitle@right#→ Target Arch
		<code>→ powerpc</code>
		stitle@right#→ Build Options
		opt (<code>→ number of jobs → 5</code>)
		stitle@right#→ ToolChain
		<code>→ kernel headers 3.2.x</code>
		p#<code>→ uClibc 0.9.32, uClibc-0.9.32.config</code>
		p#<code>→ binutils 2.21.1</code>
		p#<code>→ gcc 4.5.x</code>
		p#opt (<code>→ large files, RPC, IPv6, WCHAR</code>)
		stitle@right#→ System Configuration
		<code>→ buildroot-2012.02-bleeding</code>
		stitle@right#→ Package Selection 
		<code>→ busybox 1.19.x</code>
		p#<code>→ show packages provided by busybox</code>
		p#<code>→ networking → +netcat</code>
		p#opt (<code>→ shell → +bash, +file, +which</code>)
		p#<code>→ systemtools → +props</code>
		stitle@right#→ Filesystem Images 
		<code>→ ext2+gzip -tar</code>
		stitle@right#→ Kernel
		<code>→ version 3.2.6</code>
		p#<code>→ use defconfig</code>
		p#<code>→ config name → 83xx/mpc8313_rdb</code>
	end#half
	Parto dal presupposto che abbiate già scaricato &amp; scompattato
	<em>buildroot</em> da qualche parte. Dopodiché si procede alla
	configurazione:
	begin#inside
		p#<code>$ cd buildroot-2012.02</code>
		p#<code>$ make defconfig</code>
		p#<code>$ make menuconfig</code>
	end#inside
	Le modifiche da apportare alla configurazione sono indicate qui a destra. Le
	configurazioni con <em>opt()</em> non sono necessarie, ma solo consigliate.
	Notate che è possibile accedere alle singole configurazioni anche tramite
	begin#outside
		<code>$ make busybox-menuconfig</code>
		p#<code>$ make uclibc-menuconfig</code>
		p#<code>$ make linux-menuconfig</code>
	end#outside
	Una volta regolate tutte le opzioni, si compila
	begin#inside
		p#<code>$ time make</code> (real 44m, user 47m)
	end#inside
	Questa operazione procuce le immagini del <em>kernel</em> e del
	<em>filesystem</em>:
	begin#inside
		<code>$ ls output/images</code>
		p#<code>uImage rootfs.ext2 rootfs.ext2.gz</code>
	end#inside
	Attualmente (alle versioni <code>2012.02~2012.05</code>) <em>buildroot</em>
	non supporta direttamente la creazione dei <em>device tree</em>. Compilarlo
	manualmente, fortunatamente, non è difficile:
	begin#inside
		p#<code>$ cd output/toolchain/linux-3.2.6/</code>
		p#<code>$ export ARCH=powerpc</code>
		p#<code>$ make 83xx/mpc8313_rdb_defconfig</code>
		p#<code>$ make scripts</code>
		p#<code>$ make mpc8313erdb.dtb</code>
	end#inside
	Queste operazioni permettono la compilazione del <code>DTC</code> e la
	conseguente generazione del device tree, nascosto nei recessi del
	<em>build-tree</em>:
	begin#inside
		<code>$ ls arch/powerpc/boot/mpc8313erdb.dtb</code>
		p#<code>mpc8313erdb.dtb</code>
	end#inside
	sec#
	title#Data Astrale [<code>M21b</code>] <em>06/06</em> 2012 – <strong>CROSSING</strong>
	Per eseguire il boot, è necessario preparare le immagini.
stop#page
start#side
	title#Diario del Capitano
	br#
	stitle@right#Aprile 2012
	p#tid#<code>M00</code> – Il @primo@ impatto#m00
	p#tid#<code>M01</code> – È tutta colpa di @Ridley Scott@#m01
	p#tid#<code>M02</code> – @Igor@! Abbassa la leva!#m02
	p#tid#<code>M03</code> – La via della @seduzione@#m03
	br#
	stitle@right#Maggio 2012
	p#tid#<code>M04</code> – @Rootfs@ et similia#m04
	p#tid#<code>M05</code> – @bootpd e tftpd@#m05
	p#tid#<code>M06</code> – @Niente@ funziona#m06
	p#tid#<code>M07</code> – @Tutto@ funziona#m07
	p#tid#<code>M08</code> – Lo @script@ d'avvio#m08
	p#tid#<code>M09</code> – @Manca pgrep@#m09
	p#tid#<code>M10</code> – Allora, forse con @buildroot@… #m10
	p#tid#<code>M11</code> – @Da phail@#m11
	p#tid#<code>M12</code> – @H4x0r@#m12
	p#tid#<code>M13</code> – @Dr. H4x@ mette tutto a posto#m13
	p#tid#<code>M14</code> – @La quiete@ prima della tempesta#m14
	p#tid#<code>M15</code> – Altra @quiete@ prima della tempesta#m15
	br#
	stitle@right#Giugno 2012
	p#tid#<code>M16</code> – @La tempesta@, in laboratorio da Sgaggio#m16
	p#tid#<code>M17</code> – @Lo stupro@#m17
	p#tid#<code>M18</code> – Lo stupro, @parte seconda@#m18
	p#tid#<code>M19</code> – @La maniera giusta@#m19
	p#tid#<code>M20</code> – @Tentativi@#m20
	p#tid#<code>M21</code> – @Veryclean@#m21
stop#side
