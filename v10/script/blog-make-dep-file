#!/usr/bin/python
# -*- encoding: utf-8 -*-

from __future__ import print_function
import sys

if len(sys.argv) < 4:
	params = ['dep output file', 'map file', 'monthsâ€¦']
	print('Usage: %s <%s>' % (sys.argv[0], '> <'.join(params)))
	sys.exit(1)

# Loading old map, if available
try:
	with open(sys.argv[2], 'r') as f:
		ye_old_map = eval(f.read())
except:
	ye_old_map = []

# Loading current map
months = []
years = {}
for word in sys.argv[3:]:
	months.append(word)
	year, month = word.split('/')
	if year in years: years[year].append(month)
	else: years[year] = [month]

# Checking difference between the two maps
update = len(set(months).symmetric_difference(set(ye_old_map)))

with open(sys.argv[1], 'w') as f:

	# Each .list file depends on its .pag file
	s = '$(BLOG_OUT_DIR)%s.pag: $(BLOG_OUT_DIR)%s/%s.list'
	for year, value in sorted(years.items()):
		for month in value:
			print(s % (year, year, month), file=f)

	# Add complete dependencies only if structure has changed
	if update:

		# Relations between months: previous and next
		print(file=f)
		s = '$(BLOG_OUT_DIR)%s.pag: $(BLOG_IN_DIR)%s.post'
		other = months[0]
		for month in months[1:]:
			print(s % (other, month), file=f)
			print(s % (month, other), file=f)
			other = month

		# Archive page depends on the .list file for each year
		print(file=f)
		s = '$(ARCHIVE_PAGE): $(BLOG_OUT_DIR)%s.list'
		for year in sorted(years.keys()):
			print(s % year, file=f)

		# Index page depends on the most recent month
		print(file=f)
		s = '$(INDEX_PAGE): $(BLOG_IN_DIR)%s.post'
		print(s % sorted(months)[-1], file=f)
