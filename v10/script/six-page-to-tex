#!/usr/bin/python
# -*- encoding: utf-8 -*-

from __future__ import print_function
import sys
import getopt
#from converter import FullConverter as Converter

class Converter:

	def __init__ (self, debug, verbose):

		self.debug   = debug
		self.verbose = verbose

		self.content = ''
		self.not_page = True

		self.p_or_li = True
		self.writing = False

		self.closure = []

	def parse_file (self, filename):

		for line in open(filename, 'r').readlines():
			self.parse_line (line[:-1])

	def output_file (self, filename):

		with open(filename, 'w') as f:
			print('%s' % self.content, file=f)

	def make_begin (self, args):

		env = args[1]

		if env == 'ul':
			self.content += '\\begin{itemize}'
			self.closure.append('\\end{itemize}')

	def make_end (self):

		try: self.content += self.closure.pop()
		except: self.error ('No environment to close')

	def append_content (self, line):

		if self.writing:
			self.content += ('\n%s' % line)
		else:
			self.content += ('\n\n%s' % line)
			self.writing = True

	def parse_line (self, line):

		# Skipping everything before the start#page directive
		if self.not_page:
			if line == 'start#page':
				self.not_page = False
			return

		if '#' not in line:
			self.append_content(line)
			return

		token = line.split('#')
		c = token[0]

		if c == 'begin':
			self.stop_writing()
			self.make_begin(token)

		print('%s' % line)

opts, args = getopt.gnu_getopt(sys.argv[1:], 'vdh', ['verbose', 'debug', 'help'])

verbose   = False
debug     = False
help_flag = False

for opt in opts:
	if opt == '-v' or opt == '--verbose':
		verbose = True
	elif opt == '-d' or opt == '--debug':
		debug == True
	elif opt == '-h' or opt == '--help':
		help_flag == True

def help_message (f):

	print ("Usage: %s <six file> <tex file>" % sys.argv[0],file=f)
	print (file=f)
	print (" -v --verbose : print many messages",file=f)
	print (" -d --debug   : print debug messages",file=f)
	print (" -h --help    : print this message",file=f)

if help_flag:
	help_message(sys.stdout)
	sys.exit(0)

if len(args) != 2:
	help_message(sys.stderr)
	sys.exit(1)

c = Converter(debug, verbose)
c.parse_file(args[0])
c.output_file(args[1])
sys.exit(1)
