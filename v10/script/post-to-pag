#!/usr/bin/python
# -*- encoding: utf-8 -*-

import sys
import re

print sys.argv

input_file  = sys.argv[1]
output_file = sys.argv[2]
rel_file    = sys.argv[3]
this_year   = sys.argv[4]
this_month  = sys.argv[5]

class Poster:

	def __init__ (self, year, month):

		self.year = year
		self.month = month
		self.check = re.compile(r'^post#')

		self.content = ''
		self.post_map = {}
		self.current = False

	def store_content (self):

		if self.current:
			self.post_map[self.current] = self.content
		self.content = ''

	def append_content (self, text):

		if len(self.content):
			self.content += ('\n%s' % text)
		else: self.content = text

	def parse_file (self, filename):

		with open(filename) as f:
			for i in f:
				line = i.strip()

				if len(line) == 0:
					self.append_content(line)
					continue

				if line[0] == '#':
					self.append_content('')
					continue

				if self.check.match(line):

					token = line.split('#')
					size = len(token)

					self.store_content()
					self.current = token[1]

					self.append_content('tab#%s' % token[1])
					self.append_content('p#%s/%s/%02d' % (this_year, this_month, int(token[1])))
					if size == 4:
						self.append_content('/ %s' % token[3])
					if size > 4:
						self.append_content('/ %s &amp; %s' % (', '.join(token[3:-1]), token[-1]))
					self.append_content('title#%s' % token[2])
					continue

				self.append_content(line)

		self.store_content()

	def output_post_file (self, filename):

		print('title#%s %s' % (self.month, self.year))
		#print('prev#%s%' % ())
		#print('next#%s%' % ())
		for number, value in self.post_map.items():
			print('%s' % value)

p = Poster(this_year, this_month)
p.parse_file(input_file)
p.output_post_file(output_file)

with open(rel_file) as f:
	rel_map = eval(f.read())
print rel_map

rel_list = []
for year,content in rel_map.items():
	for month in content:
		rel_list.append('%s/%s' % (year, month))

print rel_list

this_page = '%s/%s' % (this_year, this_month)
print this_page

index = rel_list.index(this_page)
print index

if index > 0:
	prev_rel = rel_list[index - 1]
else: prev_rel = False

if index < len(rel_list) - 1:
	next_rel = rel_list[index + 1]
else: next_rel = False

print prev_rel, next_rel

sys.exit(1)
