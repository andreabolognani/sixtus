#!/usr/bin/python
# -*- encoding: utf-8 -*-

from __future__ import print_function
import sys
import os

import roman

class Splitter:

	def __init__ (self):

		self.debug = True

		self.state = 0

		self.jump = False
		self.content = ''
		self.tabs = {}
		self.meta = ''
		self.side = ''
		self.tabname = None

	def mkdir (self, filepath):

		dirpath = os.path.dirname(filepath)
		if not os.path.exists(dirpath):
			os.makedirs(dirpath)

	def append (self, text):

		self.content += '%s\n' % text

	def update_tab (self):

		if self.tabname in self.tabs:
			self.tabs[self.tabname] += self.content
		else: self.tabs[self.tabname] = self.content

		self.content = ''
		self.tabname = None

	def update_state (self, newstate):

		if self.state == 0:
			self.meta += self.content
			self.content = ''
		elif self.state == 2:
			self.side += self.content
			self.content = ''
		else: self.update_tab()

		if newstate == 'meta': self.state = 0
		elif newstate == 'page': self.state = 1
		elif newstate == 'side': self.state = 2
		else: raise 'What state is %s supposed to be?' % newstate

	def parse_file (self, filename):

		with open(filename, 'r') as f:
			for i in f.readlines():
				self.parse_line(i.strip())

		self.update_state('meta')

	def parse_line (self, line):

		if '|' not in line: self.append(line)

		token = line.split('|')
		c = token[0]

		if c == 'tab':
			self.update_tab()
			self.tabname = token[1]
		elif c == 'start': self.update_state(token[1])
		elif c == 'jump': self.jump = token[1]
		else: self.append(line)

	def output_single_jump_file (self, base):

		jump_path = os.path.normpath('%s/jump.six' % base)
		if self.debug: print('Jump file on [%s]' % jump_path)
		self.mkdir(jump_path)
		with open(jump_path, 'w') as f:
			print('jump|%s' % self.jump, file=f)

	def output_all_files (self, base):

		for name in self.tabs:
			if name: print('%s/%s' % (base, roman.convert(name)))
		raise Exception('%s/%s' % (base, roman.convert(name)))

	def output_default_tab (self, base):

		page_path = os.path.normpath('%s/page.six' % base)
		if self.debug: print('Page file on [%s]' % page_path)
		self.mkdir(page_path)
		with open(page_path, 'w') as f:
			print('%sstart|side%sstart|page%s' % (self.meta, self.side, self.tabs[None]), file=f)

	def output_single_tab (self, base):

		page_path = os.path.normpath('%s/%s/page.six' % (base, name))
		print('Page file on [%s]' % page_path)
		jump_path = os.path.normpath('%s/jump.six' % (base, name))
		print('Jump file on [%s]' % jump_path)

	def output_files (self, base):

		if self.jump: self.output_single_jump_file(base)

		elif len(self.tabs) > 1: self.output_all_files(base)

		elif None in self.tabs: self.output_default_tab(base)

		else:

			raise Exception('Single tab %s/%s' % (base, roman.convert(self.tabs.keys()[0])))

print(sys.argv)

Six_file  = sys.argv[1]
page_base = sys.argv[2]

sp = Splitter()
sp.parse_file(Six_file)
sp.output_files(page_base)
